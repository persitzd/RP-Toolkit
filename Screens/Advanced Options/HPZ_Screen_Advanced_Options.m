function HPZ_Screen_Advanced_Options(main_folder)

% this function promotes a user-interface screen to the user, allowing her
% to make choices regarding some advanced options. these options should
% normally not be tempered with, but we allow it just in case there is a
% unique need.

% for detailed explanations about input/output variables that possess
% the same name and meaning in multiple functions (e.g. data, action_flag, 
% pref_class, etc.) see: HPZ_Variables_Documentation in the "Others" sub-folder 

% it is recommended to use the numeric variables in the beginning of the 
% function when making changes to the screen.
% it is also recommended to use numeric variables in the same manner when
% adding new elements to the screen.


% read the saved settings for this screen
[bootstrap_sample_sizes, bootstrap_significance_level, BI_threshold, max_starting_points, possible_num_convergence_points, one_residuals_file, debugger_mode, print_single_subject, waitbar_settings, Varian_algorithm_settings] = HPZ_Advanced_Options_Settings_Read(main_folder);



% this little cell helps us to convert 0 and 1 to 'off' and 'on', respectively 
enable = {'off','on'};



% initialization of variables that will help make sure that the user enters only valid values 
bootstrap_sample_sizes_str = {num2str(bootstrap_sample_sizes(1)) , num2str(bootstrap_sample_sizes(2)) , num2str(bootstrap_sample_sizes(3))};
bootstrap_significance_level_str = num2str(bootstrap_significance_level);   %, '%.05f');
BI_threshold_str = num2str(BI_threshold);   %, '%.20f');
max_starting_points_str = {num2str(max_starting_points(1)) , num2str(max_starting_points(2)) , num2str(max_starting_points(1))};
possible_num_convergence_points_str = possible_num_convergence_points_vector_to_string (possible_num_convergence_points);
% possible_num_convergence_points_str = num2str(possible_num_convergence_points(1));
% for i=2:length(possible_num_convergence_points)
%     possible_num_convergence_points_str = strcat(possible_num_convergence_points_str, ',', num2str(possible_num_convergence_points(i)));
% end
%one_residuals_file (not needed)
%debugger_mode (not needed)
%waitbar_settings(2) (not needed)
%waitbar_settings(3) (not needed)
waitbar_settings_1_str = num2str(waitbar_settings(1));
Varian_algorithm_settings_str = {num2str(Varian_algorithm_settings(1)) , num2str(Varian_algorithm_settings(2))};

% show a warning if the user set it to be more than this value
BI_threshold_str_warning_threshold = 0.0001;
% restrict the user from setting it to be more than this value
BI_threshold_str_restriction_threshold = 0.01;
% % show a warning if the user set it to be less than this value
% varian_min_multiplier_warning_threshold = 1.2;



% screen size
figure_width = 840;
figure_height = 690;
% limit of height as percentage of computer screen height
max_height_percent = HPZ_Constants.max_height_percent;

% color of text of headers
headers_text_color = [0.4 , 0.4 , 0.7];
% color of text when enable button say: "Save"
enable_buttons_save_text_color = [0.2 , 0.5 , 0.2];

% height of bottom space designated for OK and Cancel buttons
buttons_space_height = 50;
% buttons height as percentage of the space they are in
buttons_height_percent = 0.6;
% the distant between a button to the edge of the screen,
% and is also half the distance between buttons.
% the size of the buttons is designed to fit this and the buttons_height 
% and the width of the screen
buttons_dists = 10;
% number of buttons
buttons_num = 3;

% width and height of all enable-buttons
buttons_width = 60;
buttons_height = 25;

% distance of highest element from top
top_dist = 10;

% how much distance between parts (different methods) that are one below each other 
move_down = 20;

% distance of the labels from the left
%left_label = 15;
% distance of other elements from the left
%left_other = 45;

% each radio options will be with height 25
radio_height = 25;
% distance of bottom radio option from the bottom
radio_bottom = 4;
% offset to the right of radio options that are vertical
%radio_offset = 15;
% offsets to the right of yes/no horizontal radio options
yes_no_offsets = [10 , 160];
yes_no_offsets2 = [10 , 90];
yes_no_offsets3 = [10 , 120];
% offsets to the right of one/two/three horizontal radio options
%three_offsets = [10 , 129, 230];
%three_offsets2 = [10 , 117, 250];

% width of each element
element_width = 330;
element_width2 = 170;
element_width3 = 250;
% normal_width for a sub element
sub_element_width = 160;
sub_element_width2 = 70;
sub_element_width3 = 110;
% label default width
label_width = 250;
% label default height
label_height = 30;

% how much the right part should be offset to the right in comparison to the left part 
move_right = element_width + 120;

% height of elements that allows to used to type in a number
text_height = 25;

% font size of label
label_font_size = 12;
% general font size
font_size = 8;
% general but bigger font size
big_font_size = 10;



%% create the figure, with a slider if needed
% scroll bar width (if scroll is needed)
scroll_width = 20;
bottom_space_height = buttons_space_height;
top_space_height = 0;
panel_height = figure_height - bottom_space_height - top_space_height;
figure_title = 'Advanced Options';
[fh , panel] = ui_scroll_screen(figure_width, figure_height, scroll_width, max_height_percent, top_space_height, bottom_space_height, figure_title);

% width including scroll bar if there is one
pos = get(fh,'position');
full_width = pos(3);



            
            
%% Bootstrap Options
% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = panel_height-top_dist - current_height;
bootstrap_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[15 , current_bottom , label_width , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',label_font_size,'fontweight','bold',...
    'ForegroundColor',headers_text_color,...
    'HorizontalAlignment','left',...
    'string','Bootstrap Options'); %#ok<NASGU>

% Enable Button
bootstrap_enable_button = uicontrol('Parent',panel, 'style','push',...
    'enable','on',...
    'unit','pix',...
    'position',[190 , current_bottom+8 , buttons_width , buttons_height],...
    'string','Edit',...
    'fontsize',big_font_size,...
    'callback',{@bootstrap_enable_button_call});

% --- Sample Size ---
% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
sample_size_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[15 , current_bottom , 150 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',big_font_size,'fontweight','bold',...
    'string','Sample Size'); %#ok<NASGU>

% Sample Size - Analytic
% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
sample_size_analytic_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[15 , current_bottom+(current_height-text_height) , 150 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',big_font_size,...
    'string','Analytic'); %#ok<NASGU>
    
sample_size_analytic_input = uicontrol('Parent',panel, ...
    'style','edit',...
    'string',bootstrap_sample_sizes_str{1},...
    'enable', 'off', ...
    'units','pix',...
    'position',[170 , current_bottom+current_height/2 , 80 , text_height],...
    'backgroundc','white',...
    'fontsize',big_font_size,...
    'callback',{@on_value_change_check_value_validity});

% Sample Size - Numeric
% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
sample_size_numeric_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[15 , current_bottom+(current_height-text_height) , 150 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',big_font_size,...
    'string','Numeric'); %#ok<NASGU>
    
sample_size_numeric_input = uicontrol('Parent',panel, ...
    'style','edit',...
    'string',bootstrap_sample_sizes_str{2},...
    'enable', 'off', ...
    'units','pix',...
    'position',[170 , current_bottom+current_height/2 , 80 , text_height],...
    'backgroundc','white',...
    'fontsize',big_font_size,...
    'callback',{@on_value_change_check_value_validity});
    
% Sample Size - Semi-Numeric
% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
sample_size_semi_numeric_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[15 , current_bottom+(current_height-text_height) , 150 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',big_font_size,...
    'string','Semi-Numeric'); %#ok<NASGU>
    
sample_size_semi_numeric_input = uicontrol('Parent',panel, ...
    'style','edit',...
    'string',bootstrap_sample_sizes_str{3},...
    'enable', 'off', ...
    'units','pix',...
    'position',[170 , current_bottom+current_height/2 , 80 , text_height],...
    'backgroundc','white',...
    'fontsize',big_font_size,...
    'callback',{@on_value_change_check_value_validity});
    
% --- Significance Level ---
% current height of element
current_height = 1.5*label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
significance_level_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[25 , current_bottom , 130 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',big_font_size,'fontweight','bold',...
    'string','Significance Level (one sided)'); %#ok<NASGU>
    
significance_level_input = uicontrol('Parent',panel, ...
    'style','edit',...
    'string',bootstrap_significance_level_str,...
    'enable', 'off', ...
    'units','pix',...
    'position',[170 , current_bottom+current_height*0.35 , 80 , text_height],...
    'backgroundc','white',...
    'fontsize',big_font_size,...
    'callback',{@on_value_change_check_value_validity});
%% End of Bootstrap Options



%% one residuals file, BI Threshold
% --- one residuals file ---
current_bottom = current_bottom - move_down;
% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
one_residuals_file_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[15 , current_bottom , label_width , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',label_font_size,'fontweight','bold',...
    'ForegroundColor',headers_text_color,...
    'HorizontalAlignment','left',...
    'string','Residuals File/s'); %#ok<NASGU>

% Enable Button
one_residuals_file_enable_button = uicontrol('Parent',panel, 'style','push',...
    'enable','on',...
    'unit','pix',...
    'position',[160 , current_bottom+8 , buttons_width , buttons_height],...
    'string','Edit',...
    'fontsize',big_font_size,...
    'callback',{@one_residuals_file_enable_button_call});

% current height of element
current_height = 35;
% current bottom coordinate
current_bottom = current_bottom - current_height;
one_residuals_file_group = uibuttongroup('Parent',panel, ...
    'units','pix',...
    'pos',[20 , current_bottom , element_width , current_height]);

one_residuals_file_rd(1) = uicontrol(one_residuals_file_group,...
    'value',one_residuals_file ~= 0,...
    'enable', 'off', ...
    'style','rad',...
    'unit','pix',...
    'position',[yes_no_offsets(1) , radio_bottom , sub_element_width , radio_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','One File for all Subjects');

one_residuals_file_rd(2) = uicontrol(one_residuals_file_group,...
    'value',one_residuals_file == 0,...
    'enable', 'off', ...
    'style','rad',...
    'unit','pix',...
    'position',[yes_no_offsets(2) , radio_bottom , sub_element_width , radio_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','Separate File for each Subject');
    
% --- BI threshold - how much will be considered as 0 ---
current_bottom = current_bottom - move_down;
% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
BI_threshold_head_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[15 , current_bottom , label_width , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',label_font_size,'fontweight','bold',...
    'ForegroundColor',headers_text_color,...
    'HorizontalAlignment','left',...
    'string','BI threshold'); %#ok<NASGU>

% Enable Button
BI_threshold_enable_button = uicontrol('Parent',panel, 'style','push',...
    'enable','on',...
    'unit','pix',...
    'position',[135 , current_bottom+8 , buttons_width , buttons_height],...
    'string','Edit',...
    'fontsize',big_font_size,...
    'callback',{@BI_threshold_enable_button_call});
    
% current height of element
current_height = 2*label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
BI_threshold_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[15 , current_bottom , 240 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','Analytic Calculation of Binary Index (BI) goes as follows: first we calculate the MMI criterion for that observation, then if MMI < BI_threshold, we say that BI = 0, otherwise BI = 1'); %#ok<NASGU>
    
BI_threshold_input = uicontrol('Parent',panel, ...
    'style','edit',...
    'string',BI_threshold_str,...
    'enable', 'off', ...
    'units','pix',...
    'position',[260 , current_bottom+current_height/2 , 160 , text_height],...
    'backgroundc','white',...
    'fontsize',big_font_size,...
    'callback',{@on_value_change_check_value_validity});

BI_threshold_warning = uicontrol('Parent',panel, ...
    'Visible',enable{(str2num(BI_threshold_str) > BI_threshold_str_warning_threshold) + 1},...
    'style','text',...
    'units','pix',...
    'position',[260 , current_bottom , 160 , text_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,'FontWeight','bold',...
    'ForegroundColor','red',...
    'string',char(strcat('It is recommended that this will be no more than', {' '}, num2str(BI_threshold_str_warning_threshold))));
 
%% End of one residuals file , BI Threshold

          

%% Waitbar Settings
current_bottom = current_bottom - move_down;
% --- minimum number of subjects so that we use a single waitbar for all of them --- 
% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
single_waitbar_head_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[15 , current_bottom , label_width , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',label_font_size,'fontweight','bold',...
    'ForegroundColor',headers_text_color,...
    'HorizontalAlignment','left',...
    'string','Waitbar Settings'); %#ok<NASGU>

% Enable Button
waitbar_enable_button = uicontrol('Parent',panel, 'style','push',...
    'enable','on',...
    'unit','pix',...
    'position',[170 , current_bottom+8 , buttons_width , buttons_height],...
    'string','Edit',...
    'fontsize',big_font_size,...
    'callback',{@waitbar_enable_button_call});
    
% current height of element
current_height = 1.8*label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
single_waitbar_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[15 , current_bottom , 200 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',big_font_size,...
    'string','If number of Subjects is at least this number, there will be a single waitbar for all Subjects'); %#ok<NASGU>
    
single_waitbar_input = uicontrol('Parent',panel, ...
    'style','edit',...
    'string',waitbar_settings_1_str,...
    'enable', 'off', ...
    'units','pix',...
    'position',[220 , current_bottom+current_height*0.3 , 80 , text_height],...
    'backgroundc','white',...
    'fontsize',big_font_size,...
    'callback',{@on_value_change_check_value_validity});

% --- consistency indices residuals waitbar ---
% current height of element
current_height = 1.3*label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
residuals_consistency_waitbar_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[15 , current_bottom , 150 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','Show Consistency Indices Residuals Waitbar Per Subject'); %#ok<NASGU>

% current height of element
current_height = 35;
% current bottom coordinate (no change)
%current_bottom = current_bottom - current_height;
residuals_consistency_waitbar_group = uibuttongroup('Parent',panel, ...
    'units','pix',...
    'pos',[170 , current_bottom+5 , element_width3 , current_height]);

residuals_consistency_waitbar_rd(1) = uicontrol(residuals_consistency_waitbar_group,...
    'value',waitbar_settings(2) ~= 0,...
    'enable', 'off', ...
    'style','rad',...
    'unit','pix',...
    'position',[yes_no_offsets3(1) , radio_bottom , sub_element_width3 , radio_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','Show Waitbar');

residuals_consistency_waitbar_rd(2) = uicontrol(residuals_consistency_waitbar_group,...
    'value',waitbar_settings(2) == 0,...
    'enable', 'off', ...
    'style','rad',...
    'unit','pix',...
    'position',[yes_no_offsets3(2) , radio_bottom , sub_element_width3 , radio_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','Dont Show Waitbar');

% --- parameter estimation residuals waitbar ---
% current height of element
current_height = 1.3*label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
residuals_estimation_waitbar_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[15 , current_bottom , 150 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','Show Parameter Estimation Residuals Waitbar Per Subject'); %#ok<NASGU>

% current height of element
current_height = 35;
% current bottom coordinate (no change)
%current_bottom = current_bottom - current_height;
residuals_estimation_waitbar_group = uibuttongroup('Parent',panel, ...
    'units','pix',...
    'pos',[170 , current_bottom+5 , element_width3 , current_height]);

residuals_estimation_waitbar_rd(1) = uicontrol(residuals_estimation_waitbar_group,...
    'value',waitbar_settings(3) ~= 0,...
    'enable', 'off', ...
    'style','rad',...
    'unit','pix',...
    'position',[yes_no_offsets3(1) , radio_bottom , sub_element_width3 , radio_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','Show Waitbar');

residuals_estimation_waitbar_rd(2) = uicontrol(residuals_estimation_waitbar_group,...
    'value',waitbar_settings(3) == 0,...
    'enable', 'off', ...
    'style','rad',...
    'unit','pix',...
    'position',[yes_no_offsets3(2) , radio_bottom , sub_element_width3 , radio_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','Dont Show Waitbar');

% --- bootstrap waitbar ---
% current height of element
current_height = 1.3*label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
bootstrap_waitbar_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[15 , current_bottom , 150 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','Show Parameter Estimation Bootstrap Waitbar Per Subject'); %#ok<NASGU>

% current height of element
current_height = 35;
% current bottom coordinate (no change)
%current_bottom = current_bottom - current_height;
bootstrap_waitbar_group = uibuttongroup('Parent',panel, ...
    'units','pix',...
    'pos',[170 , current_bottom+5 , element_width3 , current_height]);

bootstrap_waitbar_rd(1) = uicontrol(bootstrap_waitbar_group,...
    'value',waitbar_settings(4) ~= 0,...
    'enable', 'off', ...
    'style','rad',...
    'unit','pix',...
    'position',[yes_no_offsets3(1) , radio_bottom , sub_element_width3 , radio_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','Show Waitbar');

bootstrap_waitbar_rd(2) = uicontrol(bootstrap_waitbar_group,...
    'value',waitbar_settings(4) == 0,...
    'enable', 'off', ...
    'style','rad',...
    'unit','pix',...
    'position',[yes_no_offsets3(2) , radio_bottom , sub_element_width3 , radio_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','Dont Show Waitbar');
%% End of Waitbar Settings



%% number of starting points and convergence points
% --- max starting points ---
% current height of element
current_height = label_height + 10;
% current bottom coordinate
current_bottom = panel_height-top_dist - current_height;
max_starting_points_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[move_right+15 , current_bottom , label_width , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',label_font_size,'fontweight','bold',...
    'ForegroundColor',headers_text_color,...
    'HorizontalAlignment','left',...
    'string','Max Number of Initial Points'); %#ok<NASGU>

% Enable Button
max_starting_points_enable_button = uicontrol('Parent',panel, 'style','push',...
    'enable','on',...
    'unit','pix',...
    'position',[move_right+270 , current_bottom+18 , buttons_width , buttons_height],...
    'string','Edit',...
    'fontsize',big_font_size,...
    'callback',{@max_starting_points_enable_button_call});
    
% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
max_starting_points_analytic_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[move_right+15 , current_bottom+(current_height-text_height) , 150 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',big_font_size,...
    'string','Analytic'); %#ok<NASGU>
    
max_starting_points_analytic_input = uicontrol('Parent',panel, ...
    'style','edit',...
    'string',max_starting_points_str{1},...
    'enable', 'off', ...
    'units','pix',...
    'position',[move_right+170 , current_bottom+current_height/2 , 80 , text_height],...
    'backgroundc','white',...
    'fontsize',big_font_size,...
    'callback',{@on_value_change_check_value_validity});

% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
max_starting_points_numeric_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[move_right+15 , current_bottom+(current_height-text_height) , 150 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',big_font_size,...
    'string','Numeric'); %#ok<NASGU>
    
max_starting_points_numeric_input = uicontrol('Parent',panel, ...
    'style','edit',...
    'string',max_starting_points_str{2},...
    'enable', 'off', ...
    'units','pix',...
    'position',[move_right+170 , current_bottom+current_height/2 , 80 , text_height],...
    'backgroundc','white',...
    'fontsize',big_font_size,...
    'callback',{@on_value_change_check_value_validity});

% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
max_starting_points_semi_numeric_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[move_right+15 , current_bottom+(current_height-text_height) , 150 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',big_font_size,...
    'string','Semi-Numeric'); %#ok<NASGU>
    
max_starting_points_semi_numeric_input = uicontrol('Parent',panel, ...
    'style','edit',...
    'string',max_starting_points_str{3},...
    'enable', 'off', ...
    'units','pix',...
    'position',[move_right+170 , current_bottom+current_height/2 , 80 , text_height],...
    'backgroundc','white',...
    'fontsize',big_font_size,...
    'callback',{@on_value_change_check_value_validity});
    
% --- possible values of num of convergence points ---
% current height of element
current_height = 2*label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
possible_num_convergence_points_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[move_right+15 , current_bottom , label_width , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',label_font_size,'fontweight','bold',...
    'ForegroundColor',headers_text_color,...
    'HorizontalAlignment','left',...
    'string','Possible values of number of Convergence Points'); %#ok<NASGU>

% Enable Button
convergence_points_enable_button = uicontrol('Parent',panel, 'style','push',...
    'enable','on',...
    'unit','pix',...
    'position',[move_right+280 , current_bottom+25 , buttons_width , buttons_height],...
    'string','Edit',...
    'fontsize',big_font_size,...
    'callback',{@convergence_points_enable_button_call});
    
% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
possible_num_convergence_points_input = uicontrol('Parent',panel, ...
    'style','edit',...
    'string',possible_num_convergence_points_str,...
    'enable', 'off', ...
    'units','pix',...
    'position',[move_right+15 , current_bottom+current_height/2 , label_width+80 , text_height],...
    'backgroundc','white',...
    'fontsize',big_font_size,...
    'callback',{@on_value_change_check_value_validity});
%% End of number of starting points and convergence points



%% Varian Algorithm Settings
current_bottom = current_bottom - move_down;
% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
varian_algorihm_settings_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[move_right+15 , current_bottom , label_width , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',label_font_size,'fontweight','bold',...
    'ForegroundColor',headers_text_color,...
    'HorizontalAlignment','left',...
    'string','Varian Algorithm Settings'); %#ok<NASGU>

% Enable Button
varian_enable_button = uicontrol('Parent',panel, 'style','push',...
    'enable','on',...
    'unit','pix',...
    'position',[move_right+240 , current_bottom+8 , buttons_width , buttons_height],...
    'string','Edit',...
    'fontsize',big_font_size,...
    'callback',{@varian_enable_button_call});

% current height of element
current_height = 4*label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
varian_algorihm_settings_explanation_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[move_right , current_bottom , 385 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'HorizontalAlignment','left',...
    'string','Explanation: The algorithm that we use to calculate Varian, translates the Varian problem with n observations, to a Houtman-Maks problem with weights with a bigger number of observations, n(n-1) at most. The best simple indicator for the difficulty of the calculation is the number of observations in the new weighted Houtman-Maks problem, therefore if this number is too big, we use a relaxation of the problem that reduces the number of observations, thus getting an approximation (Lower Bound and Upper Bound). The more we reduce the number of observations, the less accurate the approximation (Upper Bound / Lower Bound will get bigger).'); %#ok<NASGU>

% --- maximal number of new num of obs --- 
% current height of element
current_height = 2*label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
varian_max_num_of_obs_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[move_right+15 , current_bottom , 200 , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',big_font_size,...
    'string','Maximum Number of Observations in the equivalent weighted Houtman-Maks Problem'); %#ok<NASGU>
    
varian_max_num_of_obs_input = uicontrol('Parent',panel, ...
    'style','edit',...
    'string',Varian_algorithm_settings_str{1},...
    'enable', 'off', ...
    'units','pix',...
    'position',[move_right+220 , current_bottom+current_height*0.35 , 80 , text_height],...
    'backgroundc','white',...
    'fontsize',big_font_size,...
    'callback',{@on_value_change_check_value_validity});

% % --- minimum multiplier of original num of obs --- 
% % current height of element
% current_height = 2.5*label_height;
% % current bottom coordinate
% current_bottom = current_bottom - current_height;
% varian_min_multiplier_label = uicontrol('Parent',panel, ...
%     'style','text',...
%     'units','pix',...
%     'position',[move_right+15 , current_bottom , 240 , current_height],...
%     'backgroundc',get(fh,'color'),...
%     'fontsize',big_font_size,...
%     'string','Minimum Number of Observations in the equivalent weighted Houtman-Maks Problem, as a Multiply of Original Number of Observations'); %#ok<NASGU>
%     
% varian_min_multiplier_input = uicontrol('Parent',panel, ...
%     'style','edit',...
%     'string',Varian_algorithm_settings_str{2},...
%     'enable', 'off', ...
%     'units','pix',...
%     'position',[move_right+260 , current_bottom+current_height/2 , 80 , text_height],...
%     'backgroundc','white',...
%     'fontsize',big_font_size,...
%     'callback',{@on_value_change_check_value_validity});
% 
% varian_min_multiplier_warning = uicontrol('Parent',panel, ...
%     'Visible',enable{(str2num(Varian_algorithm_settings_str{2}) < varian_min_multiplier_warning_threshold) + 1},...
%     'style','text',...
%     'units','pix',...
%     'position',[move_right+240 , current_bottom+10 , 140 , text_height],...
%     'backgroundc',get(fh,'color'),...
%     'fontsize',font_size,'FontWeight','bold',...
%     'ForegroundColor','red',...
%     'string',char(strcat('It is recommended that this will be at least', {' '}, num2str(varian_min_multiplier_warning_threshold))));
%% End of Varian Algorithm Settings



%% Debugger Mode
% --- debugger mode ---
current_bottom = current_bottom - move_down;
% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
debugger_mode_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[move_right+15 , current_bottom , label_width , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',label_font_size,'fontweight','bold',...
    'ForegroundColor',headers_text_color,...
    'HorizontalAlignment','left',...
    'string','Activate Debugger Mode'); %#ok<NASGU>

% Enable Button
debugger_enable_button = uicontrol('Parent',panel, 'style','push',...
    'enable','on',...
    'unit','pix',...
    'position',[move_right+230 , current_bottom+8 , buttons_width , buttons_height],...
    'string','Edit',...
    'fontsize',big_font_size,...
    'callback',{@debugger_enable_button_call});

% current height of element
current_height = 35;
% current bottom coordinate
current_bottom = current_bottom - current_height;
debugger_mode_group = uibuttongroup('Parent',panel, ...
    'units','pix',...
    'pos',[move_right+20 , current_bottom , element_width2 , current_height]);

debugger_mode_rd(1) = uicontrol(debugger_mode_group,...
    'value',debugger_mode ~= 0,...
    'enable', 'off', ...
    'style','rad',...
    'unit','pix',...
    'position',[yes_no_offsets2(1) , radio_bottom , sub_element_width2 , radio_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','Yes');

debugger_mode_rd(2) = uicontrol(debugger_mode_group,...
    'value',debugger_mode == 0,...
    'enable', 'off', ...
    'style','rad',...
    'unit','pix',...
    'position',[yes_no_offsets2(2) , radio_bottom , sub_element_width2 , radio_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','No');
%% End of Debugger Mode



%% Print Subject Data of Single Subject
% --- print_single_subject ---
current_bottom = current_bottom - move_down;
% current height of element
current_height = label_height;
% current bottom coordinate
current_bottom = current_bottom - current_height;
print_single_subject_label = uicontrol('Parent',panel, ...
    'style','text',...
    'units','pix',...
    'position',[move_right+15 , current_bottom , label_width , current_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',label_font_size,'fontweight','bold',...
    'ForegroundColor',headers_text_color,...
    'HorizontalAlignment','left',...
    'string','Print Data of Single Subject'); %#ok<NASGU>

% Enable Button
print_single_subject_enable_button = uicontrol('Parent',panel, 'style','push',...
    'enable','on',...
    'unit','pix',...
    'position',[move_right+230 , current_bottom+8 , buttons_width , buttons_height],...
    'string','Edit',...
    'fontsize',big_font_size,...
    'callback',{@print_single_subject_enable_button_call});

% current height of element
current_height = 35;
% current bottom coordinate
current_bottom = current_bottom - current_height;
print_single_subject_group = uibuttongroup('Parent',panel, ...
    'units','pix',...
    'pos',[move_right+20 , current_bottom , element_width2 , current_height]);

print_single_subject_rd(1) = uicontrol(print_single_subject_group,...
    'value',print_single_subject ~= 0,...
    'enable', 'off', ...
    'style','rad',...
    'unit','pix',...
    'position',[yes_no_offsets2(1) , radio_bottom , sub_element_width2 , radio_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','Yes');

print_single_subject_rd(2) = uicontrol(print_single_subject_group,...
    'value',print_single_subject == 0,...
    'enable', 'off', ...
    'style','rad',...
    'unit','pix',...
    'position',[yes_no_offsets2(2) , radio_bottom , sub_element_width2 , radio_height],...
    'backgroundc',get(fh,'color'),...
    'fontsize',font_size,...
    'string','No');
%% End of Print Subject Data of Single Subject





%% OK Button
ok_button = uicontrol('Parent',fh, 'style','push',...
    'unit','pix',...
    'position',[buttons_dists , (1-buttons_height_percent)/2*buttons_space_height , (full_width-(buttons_num+1)*buttons_dists)/buttons_num , buttons_height_percent*buttons_space_height],...
    'string','Save and Exit',...
    'fontsize',big_font_size,...
    'callback',{@ok_button_call});

%% Cancel Button
cancel_button = uicontrol('Parent',fh, 'style','push',...
    'unit','pix',...
    'position',[(full_width/buttons_num)+buttons_dists , (1-buttons_height_percent)/2*buttons_space_height , (full_width-(buttons_num+1)*buttons_dists)/buttons_num , buttons_height_percent*buttons_space_height],...
    'string','Cancel',...
    'fontsize',big_font_size,...
    'callback',{@cancel_button_call}); %#ok<NASGU>

%% Reset Button
reset_button = uicontrol('Parent',fh, 'style','push',...
    'unit','pix',...
    'position',[2*(full_width/buttons_num)+buttons_dists , (1-buttons_height_percent)/2*buttons_space_height , (full_width-(buttons_num+1)*buttons_dists)/buttons_num , buttons_height_percent*buttons_space_height],...
    'string','Reset Settings',...
    'fontsize',big_font_size,'fontweight','bold',...
    'ForegroundColor','red','BackgroundColor',[0.9,0.6,0.6],...
    'callback',{@reset_button_call}); %#ok<NASGU>

            
    
            
            
uiwait(fh)  % Prevent all other processes from starting until closed.





function [] = on_value_change_check_value_validity(varargin)
    
    min_sample_size = 10;
    max_sample_size_analytic = 1000000;
    max_sample_size_numeric = 10000;
    max_sample_size_semi_numeric = 100000;
    
    min_value_of_max_starting_points = 3;
    max_value_of_max_starting_points = 10000;
    
    min_value_of_varian_max_num_of_obs = 150;
    
    previous_bootstrap_sample_sizes_str = bootstrap_sample_sizes_str;
    bootstrap_sample_sizes_str{1} = get(sample_size_analytic_input,'string');
    bootstrap_sample_sizes_str{2} = get(sample_size_numeric_input,'string');
    bootstrap_sample_sizes_str{3} = get(sample_size_semi_numeric_input ,'string');
    if ~all(ismember(bootstrap_sample_sizes_str{1}, 'Ee+^1234567890')) || isempty(str2num(bootstrap_sample_sizes_str{1}))
        % the user entered something that is not a number
        bootstrap_sample_sizes_str{1} = previous_bootstrap_sample_sizes_str{1};
        set(sample_size_analytic_input,'string',bootstrap_sample_sizes_str{1});
    elseif str2double(bootstrap_sample_sizes_str{1}) < min_sample_size
        bootstrap_sample_sizes_str{1} = num2str(min_sample_size);
        set(sample_size_analytic_input,'string',bootstrap_sample_sizes_str{1});
    elseif str2double(bootstrap_sample_sizes_str{1}) > max_sample_size_analytic
        bootstrap_sample_sizes_str{1} = num2str(max_sample_size_analytic);
        set(sample_size_analytic_input,'string',bootstrap_sample_sizes_str{1});
    end
    if ~all(ismember(bootstrap_sample_sizes_str{2}, 'Ee+^1234567890')) || isempty(str2num(bootstrap_sample_sizes_str{2}))
        % the user entered something that is not a number
        bootstrap_sample_sizes_str{2} = previous_bootstrap_sample_sizes_str{2};
        set(sample_size_numeric_input,'string',bootstrap_sample_sizes_str{2});
    elseif str2double(bootstrap_sample_sizes_str{2}) < min_sample_size
        bootstrap_sample_sizes_str{2} = num2str(min_sample_size);
        set(sample_size_numeric_input,'string',bootstrap_sample_sizes_str{2});
    elseif str2double(bootstrap_sample_sizes_str{2}) > max_sample_size_numeric
        bootstrap_sample_sizes_str{2} = num2str(max_sample_size_numeric);
        set(sample_size_numeric_input,'string',bootstrap_sample_sizes_str{2});
    end
    if ~all(ismember(bootstrap_sample_sizes_str{3}, 'Ee+^1234567890')) || isempty(str2num(bootstrap_sample_sizes_str{3}))
        % the user entered something that is not a number
        bootstrap_sample_sizes_str{3} = previous_bootstrap_sample_sizes_str{3};
        set(sample_size_semi_numeric_input,'string',bootstrap_sample_sizes_str{3});
    elseif str2double(bootstrap_sample_sizes_str{3}) < min_sample_size
        bootstrap_sample_sizes_str{3} = num2str(min_sample_size);
        set(sample_size_semi_numeric_input,'string',bootstrap_sample_sizes_str{3});
    elseif str2double(bootstrap_sample_sizes_str{3}) > max_sample_size_semi_numeric
        bootstrap_sample_sizes_str{3} = num2str(max_sample_size_semi_numeric);
        set(sample_size_semi_numeric_input,'string',bootstrap_sample_sizes_str{3});
    end
    
    previous_bootstrap_significance_level_str = bootstrap_significance_level_str;
    bootstrap_significance_level_str = get(significance_level_input,'string');
    if ~all(ismember(bootstrap_significance_level_str, 'Ee+-^.1234567890')) || isempty(str2num(bootstrap_significance_level_str)) %#ok<*ST2NM>
        % the user entered something that is not a number
        bootstrap_significance_level_str = previous_bootstrap_significance_level_str;
        set(significance_level_input,'string',bootstrap_significance_level_str);
    elseif str2num(bootstrap_significance_level_str) > 0.1
        bootstrap_significance_level_str = num2str(0.1);
        set(significance_level_input,'string',bootstrap_significance_level_str);
    elseif str2num(bootstrap_significance_level_str) < 10^-6
        bootstrap_significance_level_str = num2str(10^-6);
        set(significance_level_input,'string',bootstrap_significance_level_str);
    end
    
    previous_BI_threshold_str = BI_threshold_str;
    BI_threshold_str = get(BI_threshold_input,'string');
    if ~all(ismember(BI_threshold_str, 'Ee+-^.1234567890')) || isempty(str2num(BI_threshold_str))
        % the user entered something that is not a number
        BI_threshold_str = previous_BI_threshold_str;
        set(BI_threshold_input,'string',BI_threshold_str);
    elseif str2num(BI_threshold_str) < 0
        BI_threshold_str = num2str(0);
        set(BI_threshold_input,'string',BI_threshold_str);
    elseif str2num(BI_threshold_str) > BI_threshold_str_restriction_threshold
        BI_threshold_str = num2str(BI_threshold_str_restriction_threshold);
        set(BI_threshold_input,'string',BI_threshold_str);
    end
    set(BI_threshold_warning,'Visible',enable{(str2num(BI_threshold_str) > BI_threshold_str_warning_threshold) + 1});
        
    previous_waitbar_settings_1_str = waitbar_settings_1_str;
    waitbar_settings_1_str = get(single_waitbar_input,'string');
    if ~all(ismember(waitbar_settings_1_str, 'Ee+^1234567890')) || isempty(str2num(waitbar_settings_1_str))
        % the user entered something that is not a number
        waitbar_settings_1_str = previous_waitbar_settings_1_str;
        set(single_waitbar_input,'string',waitbar_settings_1_str);
    elseif str2num(waitbar_settings_1_str) < 0
        waitbar_settings_1_str = num2str(0);
        set(single_waitbar_input,'string',waitbar_settings_1_str);
    end
    
    previous_max_starting_points_str = max_starting_points_str;
    max_starting_points_str{1} = get(max_starting_points_analytic_input,'string');
    max_starting_points_str{2} = get(max_starting_points_numeric_input,'string');
    max_starting_points_str{3} = get(max_starting_points_semi_numeric_input ,'string');
    if ~all(ismember(max_starting_points_str{1}, 'Ee^+1234567890')) || isempty(str2num(max_starting_points_str{1}))
        % the user entered something that is not a number
        max_starting_points_str{1} = previous_max_starting_points_str{1};
        set(max_starting_points_analytic_input,'string',max_starting_points_str{1});
    elseif str2double(max_starting_points_str{1}) < min_value_of_max_starting_points
        max_starting_points_str{1} = num2str(min_value_of_max_starting_points);
        set(max_starting_points_analytic_input,'string',max_starting_points_str{1});
    elseif str2double(max_starting_points_str{1}) > max_value_of_max_starting_points
        max_starting_points_str{1} = num2str(max_value_of_max_starting_points);
        set(max_starting_points_analytic_input,'string',max_starting_points_str{1});
    end
    if ~all(ismember(max_starting_points_str{2}, 'Ee^+1234567890')) || isempty(str2num(max_starting_points_str{2}))
        % the user entered something that is not a number
        max_starting_points_str{2} = previous_max_starting_points_str{2};
        set(max_starting_points_numeric_input,'string',max_starting_points_str{2});
    elseif str2double(max_starting_points_str{2}) < min_value_of_max_starting_points
        max_starting_points_str{2} = num2str(min_value_of_max_starting_points);
        set(max_starting_points_numeric_input,'string',max_starting_points_str{2});
    elseif str2double(max_starting_points_str{2}) > max_value_of_max_starting_points
        max_starting_points_str{2} = num2str(max_value_of_max_starting_points);
        set(max_starting_points_numeric_input,'string',max_starting_points_str{2});
    end
    if ~all(ismember(max_starting_points_str{3}, 'Ee^+1234567890')) || isempty(str2num(max_starting_points_str{3}))
        % the user entered something that is not a number
        max_starting_points_str{3} = previous_max_starting_points_str{3};
        set(max_starting_points_semi_numeric_input,'string',max_starting_points_str{3});
    elseif str2double(max_starting_points_str{3}) < min_value_of_max_starting_points
        max_starting_points_str{3} = num2str(min_value_of_max_starting_points);
        set(max_starting_points_semi_numeric_input,'string',max_starting_points_str{3});
    elseif str2double(max_starting_points_str{3}) > max_value_of_max_starting_points
        max_starting_points_str{3} = num2str(max_value_of_max_starting_points);
        set(max_starting_points_semi_numeric_input,'string',max_starting_points_str{3});
    end
    
    previous_possible_num_convergence_points_str = possible_num_convergence_points_str;
    possible_num_convergence_points_str = get(possible_num_convergence_points_input,'string');
    if ~all(ismember(possible_num_convergence_points_str, ',1234567890')) || isempty(possible_num_convergence_points_str)
        % the user entered something that is not a number
        possible_num_convergence_points_str = previous_possible_num_convergence_points_str;
        set(possible_num_convergence_points_input,'string',possible_num_convergence_points_str);
    else
%         possible_num_convergence_points_split = strsplit(possible_num_convergence_points_str, ',');
%         possible_num_convergence_points = [];
%         for j=1:length(possible_num_convergence_points_split)
%             current_num = str2num(possible_num_convergence_points_split{j});
%             if ~isempty(current_num) && current_num >= 1
%                 possible_num_convergence_points = [possible_num_convergence_points , current_num]; %#ok<AGROW>
%             end
%         end
        possible_num_convergence_points = possible_num_convergence_points_string_to_vector (possible_num_convergence_points_str);
        if isempty(possible_num_convergence_points)
            % the user entered invalid numbers (somehow)
            possible_num_convergence_points_str = previous_possible_num_convergence_points_str;
            set(possible_num_convergence_points_input,'string',possible_num_convergence_points_str);
        else
%             % we take only unique values, and also sort the vector
%             possible_num_convergence_points = unique(possible_num_convergence_points);
%             % now we turn it back to a string with "," separating values
%             possible_num_convergence_points_str = num2str(possible_num_convergence_points(1));
%             for j=2:length(possible_num_convergence_points)
%                 possible_num_convergence_points_str = strcat(possible_num_convergence_points_str, ',', num2str(possible_num_convergence_points(j)));
%             end
            possible_num_convergence_points_str = possible_num_convergence_points_vector_to_string (possible_num_convergence_points);
            % finally, we assign it back
            set(possible_num_convergence_points_input,'string',possible_num_convergence_points_str);
        end
    end
    
    previous_Varian_algorithm_settings_str = Varian_algorithm_settings_str;
    Varian_algorithm_settings_str{1} = get(varian_max_num_of_obs_input,'string');
    if ~all(ismember(Varian_algorithm_settings_str{1}, 'Ee+^1234567890')) || isempty(str2num(Varian_algorithm_settings_str{1}))
        % the user entered something that is not a number
        Varian_algorithm_settings_str{1} = previous_Varian_algorithm_settings_str{1};
        set(varian_max_num_of_obs_input,'string',Varian_algorithm_settings_str{1});
    elseif str2num(Varian_algorithm_settings_str{1}) < min_value_of_varian_max_num_of_obs
        Varian_algorithm_settings_str{1} = num2str(min_value_of_varian_max_num_of_obs);
        set(varian_max_num_of_obs_input,'string',Varian_algorithm_settings_str{1});
    end
    
%     Varian_algorithm_settings_str{2} = get(varian_min_multiplier_input,'string');
%     if ~all(ismember(Varian_algorithm_settings_str{2}, 'Ee+-^.1234567890')) || isempty(str2num(Varian_algorithm_settings_str{2}))
%         % the user entered something that is not a number
%         Varian_algorithm_settings_str{2} = previous_Varian_algorithm_settings_str{2};
%         set(varian_min_multiplier_input,'string',Varian_algorithm_settings_str{2});
%     elseif str2num(Varian_algorithm_settings_str{2}) < 1
%         Varian_algorithm_settings_str{2} = num2str(1);
%         set(varian_min_multiplier_input,'string',Varian_algorithm_settings_str{2});
%     end
%     set(varian_min_multiplier_warning,'Visible',enable{(str2num(Varian_algorithm_settings_str{2}) < varian_min_multiplier_warning_threshold) + 1});

end





%% functions for enable buttons

% this function is a helper function
function [] = enable_all_enable_buttons(enable_or_disable)
    enable_str = enable{enable_or_disable + 1};
    % enable or diable all enable buttons, and the "save and exit" button
    set(bootstrap_enable_button, 'enable', enable_str);
    set(one_residuals_file_enable_button, 'enable', enable_str);
    set(BI_threshold_enable_button, 'enable', enable_str);
    set(waitbar_enable_button, 'enable', enable_str);
    set(max_starting_points_enable_button, 'enable', enable_str);
    set(convergence_points_enable_button, 'enable', enable_str);
    set(varian_enable_button, 'enable', enable_str);
    set(debugger_enable_button, 'enable', enable_str);
    set(print_single_subject_enable_button, 'enable', enable_str);
    set(ok_button, 'enable', enable_str);
end

% this function is a helper function
function [] = enable_button_call_helper(enable_button, input_elements)
    if strcmp(get(enable_button, 'string') , 'Edit')
        % disable all the rest enable-buttons
        enable_all_enable_buttons(0);
        enable_str = 'on';
        % change this button
        set(enable_button, 'enable', 'on');
        set(enable_button, 'string', 'Save');
        set(enable_button, 'ForegroundColor', enable_buttons_save_text_color);
    else % strcmp(get(bootstrap_enable_button, 'string') , 'Save')
        % enable all enable-buttons
        enable_str = 'off';
        enable_all_enable_buttons(1);
        % change this button
        set(enable_button, 'string', 'Edit');
        set(enable_button, 'ForegroundColor', 'black');
    end
    % enable/disable the input elements
    for j=1:length(input_elements)
        set(input_elements{j}, 'enable', enable_str);
    end
end

% #1
function [] = bootstrap_enable_button_call(varargin)
    enable_button_call_helper(bootstrap_enable_button, ...
        {sample_size_analytic_input, sample_size_numeric_input, ...
        sample_size_semi_numeric_input, significance_level_input});
end
% #2
function [] = one_residuals_file_enable_button_call(varargin)
    enable_button_call_helper(one_residuals_file_enable_button, ...
                            {one_residuals_file_rd});
end
% #3
function [] = BI_threshold_enable_button_call(varargin)
    enable_button_call_helper(BI_threshold_enable_button, ...
                            {BI_threshold_input});
end
% #4
function [] = waitbar_enable_button_call(varargin)
    enable_button_call_helper(waitbar_enable_button, {single_waitbar_input, ...
                            residuals_consistency_waitbar_rd, residuals_estimation_waitbar_rd, bootstrap_waitbar_rd});
end
% #5
function [] = max_starting_points_enable_button_call(varargin)
    enable_button_call_helper(max_starting_points_enable_button, {max_starting_points_analytic_input, ...
                            max_starting_points_numeric_input, max_starting_points_semi_numeric_input});
end
% #6
function [] = convergence_points_enable_button_call(varargin)
    enable_button_call_helper(convergence_points_enable_button, ...
                            {possible_num_convergence_points_input});
end

% #7
function [] = varian_enable_button_call(varargin)
%     enable_button_call_helper(varian_enable_button, ...
%                             {varian_max_num_of_obs_input, varian_min_multiplier_input});
    enable_button_call_helper(varian_enable_button, ...
                            {varian_max_num_of_obs_input});
end
% #8
function [] = debugger_enable_button_call(varargin)
    enable_button_call_helper(debugger_enable_button, ...
                            {debugger_mode_rd});
end
% #9
function [] = print_single_subject_enable_button_call(varargin)
    enable_button_call_helper(print_single_subject_enable_button, ...
                            {print_single_subject_rd});
end




%% OK button
function [] = ok_button_call(varargin)
    
    %ok = 1;

    bootstrap_sample_sizes(1) = str2num(get(sample_size_analytic_input,'string'));
    bootstrap_sample_sizes(2) = str2num(get(sample_size_numeric_input,'string'));
    bootstrap_sample_sizes(3) = str2num(get(sample_size_semi_numeric_input ,'string'));
    bootstrap_significance_level = str2num(get(significance_level_input,'string'));
    
    BI_threshold = str2num(get(BI_threshold_input,'string'));
    
    if get(one_residuals_file_rd(1),'value') == 1
        one_residuals_file = 1;
    else
        one_residuals_file = 0;
    end
    
    waitbar_settings(1) = str2num(get(single_waitbar_input,'string'));
    if get(residuals_consistency_waitbar_rd(1),'value') == 1
        waitbar_settings(2) = 1;
    else
        waitbar_settings(2) = 0;
    end
    if get(residuals_estimation_waitbar_rd(1),'value') == 1
        waitbar_settings(3) = 1;
    else
        waitbar_settings(3) = 0;
    end
    if get(bootstrap_waitbar_rd(1),'value') == 1
        waitbar_settings(4) = 1;
    else
        waitbar_settings(4) = 0;
    end
    
    max_starting_points(1) = str2num(get(max_starting_points_analytic_input,'string'));
    max_starting_points(2) = str2num(get(max_starting_points_numeric_input,'string'));
    max_starting_points(3) = str2num(get(max_starting_points_semi_numeric_input ,'string'));
    
    possible_num_convergence_points_str = get(possible_num_convergence_points_input,'string');
    possible_num_convergence_points = possible_num_convergence_points_string_to_vector (possible_num_convergence_points_str);   
%     possible_num_convergence_points_split = strsplit(possible_num_convergence_points_str, ',');
%     possible_num_convergence_points = [];
%     for j=1:length(possible_num_convergence_points_split)
%         current_num = str2num(possible_num_convergence_points_split{j});
%         if ~isempty(current_num) && current_num >= 1
%             possible_num_convergence_points = [possible_num_convergence_points , current_num]; %#ok<AGROW>
%         end
%     end
%     possible_num_convergence_points = unique(possible_num_convergence_points);
    
    Varian_algorithm_settings(1) = str2num(get(varian_max_num_of_obs_input,'string'));
    Varian_algorithm_settings(2) = 2; %Varian_algorithm_settings(2) = str2num(get(varian_min_multiplier_input,'string'));
    
    
    if get(debugger_mode_rd(1),'value') == 1
        debugger_mode = 1;
    else
        debugger_mode = 0;
    end
    
    if get(print_single_subject_rd(1),'value') == 1
        print_single_subject = 1;
    else
        print_single_subject = 0;
    end
    
    
    % write the current setting to the settings file to be saved for next time  
    HPZ_Advanced_Options_Settings_Write(bootstrap_sample_sizes, bootstrap_significance_level, BI_threshold, max_starting_points, possible_num_convergence_points, one_residuals_file, debugger_mode, print_single_subject, waitbar_settings, Varian_algorithm_settings, main_folder);
    
    
    % close the window
    close(fh);

end % end of call back function



%% Cancel button
function [] = cancel_button_call(varargin)
    % Callback for Cancel button.

    %ok = 0;

    % close the window
    close(fh);

end



%% Reset button
function [] = reset_button_call(varargin)
    % Callback for Reset button.

    % read default values
    [bootstrap_sample_sizes, bootstrap_significance_level, BI_threshold, max_starting_points, possible_num_convergence_points, one_residuals_file, debugger_mode, print_single_subject, waitbar_settings, Varian_algorithm_settings] = HPZ_Advanced_Options_Settings_Default_Values();
    
    % reset bootstrap settings
    set(sample_size_analytic_input,'string',num2str(bootstrap_sample_sizes(1)));
    set(sample_size_numeric_input,'string',num2str(bootstrap_sample_sizes(2)));
    set(sample_size_semi_numeric_input,'string',num2str(bootstrap_sample_sizes(3)));
    set(significance_level_input,'string',num2str(bootstrap_significance_level));
    % reset BI threshold
    set(BI_threshold_input,'string',num2str(BI_threshold));
    set(BI_threshold_warning,'Visible',enable{1});
    % reset residuals files settings
    set(one_residuals_file_rd(1),'value', (one_residuals_file ~= 0)*1);
    set(one_residuals_file_rd(2),'value', (one_residuals_file == 0)*1);
    % reset waitbar settings
    set(single_waitbar_input,'string',num2str(waitbar_settings(1)));
    set(residuals_consistency_waitbar_rd(1),'value', (waitbar_settings(2) ~= 0)*1);
    set(residuals_consistency_waitbar_rd(2),'value', (waitbar_settings(2) == 0)*1);
    set(residuals_estimation_waitbar_rd(1),'value', (waitbar_settings(3) ~= 0)*1);
    set(residuals_estimation_waitbar_rd(2),'value', (waitbar_settings(3) == 0)*1);
    set(bootstrap_waitbar_rd(1),'value', (waitbar_settings(4) ~= 0)*1);
    set(bootstrap_waitbar_rd(2),'value', (waitbar_settings(4) == 0)*1);
    % reset starting points and convergence points settings
    set(max_starting_points_analytic_input,'string',num2str(max_starting_points(1)));
    set(max_starting_points_numeric_input,'string',num2str(max_starting_points(2)));
    set(max_starting_points_semi_numeric_input,'string',num2str(max_starting_points(3)));
    possible_num_convergence_points_str = possible_num_convergence_points_vector_to_string (possible_num_convergence_points);
    set(possible_num_convergence_points_input,'string',possible_num_convergence_points_str);
    % reset varian settings
    set(varian_max_num_of_obs_input,'string',num2str(Varian_algorithm_settings(1)));
    %set(varian_min_multiplier_input,'string',num2str(Varian_algorithm_settings(2)));
    %set(varian_min_multiplier_warning,'Visible',enable{1});
    % reset debugger mode settings
    set(debugger_mode_rd(1),'value', (debugger_mode ~= 0)*1);
    set(debugger_mode_rd(2),'value', (debugger_mode == 0)*1);
    % reset print single subject settings
    set(print_single_subject_rd(1),'value', (print_single_subjecte ~= 0)*1);
    set(print_single_subject_rd(2),'value', (print_single_subject == 0)*1);
end





% these two are helper functions

function as_vector = possible_num_convergence_points_string_to_vector (as_string)
    as_string_split = strsplit(as_string, ',');
    as_vector = [];
    for j=1:length(as_string_split)
        current_num = str2num(as_string_split{j});
        if ~isempty(current_num) && current_num >= 1 && current_num <= 1000
            as_vector = [as_vector , current_num]; %#ok<AGROW>
        end
    end
    as_vector = unique(as_vector);
end

function as_string = possible_num_convergence_points_vector_to_string (as_vector)
    as_string = num2str(as_vector(1));
    for j=2:length(as_vector)
        as_string = strcat(as_string, ',', num2str(as_vector(j)));
    end
end



end % end of function